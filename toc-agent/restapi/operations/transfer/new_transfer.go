// Code generated by go-swagger; DO NOT EDIT.

package transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// NewTransferHandlerFunc turns a function with the right signature into a new transfer handler
type NewTransferHandlerFunc func(NewTransferParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NewTransferHandlerFunc) Handle(params NewTransferParams) middleware.Responder {
	return fn(params)
}

// NewTransferHandler interface for that can handle valid new transfer params
type NewTransferHandler interface {
	Handle(NewTransferParams) middleware.Responder
}

// NewNewTransfer creates a new http.Handler for the new transfer operation
func NewNewTransfer(ctx *middleware.Context, handler NewTransferHandler) *NewTransfer {
	return &NewTransfer{Context: ctx, Handler: handler}
}

/*
	NewTransfer swagger:route POST /transfers transfer newTransfer

# Start a backup transfer attempt

Run transfer and return immediately without waiting
*/
type NewTransfer struct {
	Context *middleware.Context
	Handler NewTransferHandler
}

func (o *NewTransfer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewNewTransferParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Restoration restoration
// Example: {"id":1}
//
// swagger:model Restoration
type Restoration struct {

	// backup
	Backup *Backup `json:"backup,omitempty"`

	// id
	ID int64 `json:"id"`

	// Restoration Status
	// Enum: [queued running completed failed]
	Status string `json:"status"`
}

// Validate validates this restoration
func (m *Restoration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Restoration) validateBackup(formats strfmt.Registry) error {
	if swag.IsZero(m.Backup) { // not required
		return nil
	}

	if m.Backup != nil {
		if err := m.Backup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup")
			}
			return err
		}
	}

	return nil
}

var restorationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["queued","running","completed","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		restorationTypeStatusPropEnum = append(restorationTypeStatusPropEnum, v)
	}
}

const (

	// RestorationStatusQueued captures enum value "queued"
	RestorationStatusQueued string = "queued"

	// RestorationStatusRunning captures enum value "running"
	RestorationStatusRunning string = "running"

	// RestorationStatusCompleted captures enum value "completed"
	RestorationStatusCompleted string = "completed"

	// RestorationStatusFailed captures enum value "failed"
	RestorationStatusFailed string = "failed"
)

// prop value enum
func (m *Restoration) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, restorationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Restoration) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this restoration based on the context it is used
func (m *Restoration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Restoration) contextValidateBackup(ctx context.Context, formats strfmt.Registry) error {

	if m.Backup != nil {

		if swag.IsZero(m.Backup) { // not required
			return nil
		}

		if err := m.Backup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("backup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Restoration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Restoration) UnmarshalBinary(b []byte) error {
	var res Restoration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

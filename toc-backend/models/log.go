// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Log log
// Example: {"id":1,"status":"completed","time":"2024-12-31T23:59:59Z","url":"/static/logs-20240910T064100Z.zip"}
//
// swagger:model Log
type Log struct {

	// id
	ID int64 `json:"id"`

	// Archive Status
	// Enum: [queued running completed failed]
	Status string `json:"status"`

	// time
	// Format: date-time
	Time strfmt.DateTime `json:"time"`

	// url
	URL string `json:"url"`
}

// Validate validates this log
func (m *Log) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var logTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["queued","running","completed","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logTypeStatusPropEnum = append(logTypeStatusPropEnum, v)
	}
}

const (

	// LogStatusQueued captures enum value "queued"
	LogStatusQueued string = "queued"

	// LogStatusRunning captures enum value "running"
	LogStatusRunning string = "running"

	// LogStatusCompleted captures enum value "completed"
	LogStatusCompleted string = "completed"

	// LogStatusFailed captures enum value "failed"
	LogStatusFailed string = "failed"
)

// prop value enum
func (m *Log) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, logTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Log) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Log) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this log based on context it is used
func (m *Log) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Log) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Log) UnmarshalBinary(b []byte) error {
	var res Log
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

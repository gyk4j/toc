// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "An API to create backup and restoration",
    "title": "toc",
    "termsOfService": "http://gyk4j.github.io/terms/",
    "contact": {
      "email": "147011991+gyk4j@users.noreply.github.com"
    },
    "license": {
      "name": "Eclipse Public License 2.0 (EPL)",
      "url": "https://www.eclipse.org/legal/epl-2.0/"
    },
    "version": "1.0.0"
  },
  "host": "0.0.0.0:80",
  "basePath": "/v1",
  "paths": {
    "/archives": {
      "get": {
        "description": "Retrieve progress, information and state of all archives",
        "produces": [
          "application/json"
        ],
        "tags": [
          "archive"
        ],
        "summary": "Query archive info",
        "operationId": "getArchives",
        "responses": {
          "200": {
            "description": "Archive info retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Archive"
              }
            }
          },
          "403": {
            "description": "Forbidden from querying archive info",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Archive not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update archive status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "archive"
        ],
        "summary": "Update archive status/info",
        "operationId": "updateArchive",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Archive request to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Archive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Archive updated",
            "schema": {
              "$ref": "#/definitions/Archive"
            }
          },
          "403": {
            "description": "Forbidden from updating archive",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a ZIP archive of backup snapshot data",
        "produces": [
          "application/json"
        ],
        "tags": [
          "archive"
        ],
        "summary": "Archive data",
        "operationId": "newArchive",
        "responses": {
          "200": {
            "description": "Data archived",
            "schema": {
              "$ref": "#/definitions/Archive"
            }
          },
          "403": {
            "description": "Forbidden from archiving data",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/archives/{archiveId}": {
      "get": {
        "description": "Query a single archive",
        "produces": [
          "application/json"
        ],
        "tags": [
          "archive"
        ],
        "summary": "Find archive by ID",
        "operationId": "getArchiveById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-exportParamName": "ArchiveId",
            "description": "ID of archive to return",
            "name": "archiveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Archive"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Archive not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/backups": {
      "get": {
        "description": "Retrieve information and state of all backups and their snapshots",
        "produces": [
          "application/json"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Query backup info",
        "operationId": "getBackups",
        "responses": {
          "200": {
            "description": "Backup info retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Backup"
              }
            }
          },
          "403": {
            "description": "Forbidden from querying backup info",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Backup not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update backup status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Update backup status/info",
        "operationId": "updateBackup",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Backup and associated snapshots to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Backup updated",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "403": {
            "description": "Forbidden from updating backup",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new backup snapshot",
        "produces": [
          "application/json"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Create a new backup snapshot",
        "operationId": "newBackup",
        "responses": {
          "200": {
            "description": "Backup started",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "403": {
            "description": "Forbidden from creating duplicate/repeat backup",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Main backup server not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Main TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. Main backup server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on main TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. Main backup server did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/backups/{backupId}": {
      "get": {
        "description": "Query a single backup",
        "produces": [
          "application/json"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Find backup by ID",
        "operationId": "getBackupById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-exportParamName": "BackupId",
            "description": "ID of backup to return",
            "name": "backupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Backup not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/logs": {
      "put": {
        "description": "Update log status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "log"
        ],
        "summary": "Update log status/info",
        "operationId": "updateLog",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Log request to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log updated",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "403": {
            "description": "Forbidden from updating log request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Export logs for all servers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "log"
        ],
        "summary": "Export logs",
        "operationId": "exportLog",
        "responses": {
          "200": {
            "description": "Logs exported",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "403": {
            "description": "Forbidden from exporting logs",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Quota not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/quotas": {
      "get": {
        "description": "Retrieve all quotas set",
        "produces": [
          "application/json"
        ],
        "tags": [
          "quota"
        ],
        "summary": "Refresh quota info",
        "operationId": "getQuotas",
        "responses": {
          "200": {
            "description": "Quotas retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Quota"
              }
            }
          },
          "403": {
            "description": "Forbidden from querying quota info",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Quota not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/restorations": {
      "get": {
        "description": "Retrieve information and state of all restorations, their backup and snapshots",
        "produces": [
          "application/json"
        ],
        "tags": [
          "restoration"
        ],
        "summary": "Query restoration info",
        "operationId": "getRestorations",
        "responses": {
          "200": {
            "description": "Restoration info retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Restoration"
              }
            }
          },
          "403": {
            "description": "Forbidden from querying restoration info",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Restoration not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update restoration status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "restoration"
        ],
        "summary": "Update restoration status/info",
        "operationId": "updateRestoration",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Restoration request to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Restoration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restoration updated",
            "schema": {
              "$ref": "#/definitions/Restoration"
            }
          },
          "403": {
            "description": "Forbidden from updating restoration",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Run backup restoration and return immediately without waiting",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "restoration"
        ],
        "summary": "Start a backup restoration attempt",
        "operationId": "newRestoration",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Backup and associated snapshots for restoration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restoration started",
            "schema": {
              "$ref": "#/definitions/Restoration"
            }
          },
          "403": {
            "description": "Forbidden from creating duplicate/repeat restoration",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Stepup backup server not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Stepup TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. Stepup backup server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on stepup TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. Stepup backup server did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/restorations/{restorationId}": {
      "get": {
        "description": "Query a single restoration",
        "produces": [
          "application/json"
        ],
        "tags": [
          "restoration"
        ],
        "summary": "Find restoration by ID",
        "operationId": "getRestorationById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-exportParamName": "RestorationId",
            "description": "ID of restoration to return",
            "name": "restorationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Restoration"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Restoration not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/synchronizations": {
      "put": {
        "description": "Update synchronization status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "synchronization"
        ],
        "summary": "Update synchronization status/info",
        "operationId": "updateSynchronization",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Synchronization request to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Synchronization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Synchronization updated",
            "schema": {
              "$ref": "#/definitions/Synchronization"
            }
          },
          "403": {
            "description": "Forbidden from updating synchronization",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Initiates backup snapshot state synchronization due to network disconnection",
        "produces": [
          "application/json"
        ],
        "tags": [
          "synchronization"
        ],
        "summary": "Request backup snapshot synchronization between main and stepup controller",
        "operationId": "newSynchronization",
        "responses": {
          "200": {
            "description": "Synchronization started",
            "schema": {
              "$ref": "#/definitions/Synchronization"
            }
          },
          "403": {
            "description": "Forbidden from starting synchronization",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. Backup server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. One or more servers did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/transfers": {
      "get": {
        "description": "Retrieve status of all transfers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "Query transfer status",
        "operationId": "getTransfers",
        "responses": {
          "200": {
            "description": "Transfer info retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transfer"
              }
            }
          },
          "403": {
            "description": "Forbidden from querying transfer status",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Transfer not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update transfer status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "Update transfer status/info",
        "operationId": "updateTransfer",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Transfer request to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transfer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transfer updated",
            "schema": {
              "$ref": "#/definitions/Transfer"
            }
          },
          "403": {
            "description": "Forbidden from updating transfer",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Run transfer and return immediately without waiting",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "Start a backup transfer attempt",
        "operationId": "newTransfer",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Backup and associated snapshots for restoration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transfer started",
            "schema": {
              "$ref": "#/definitions/Transfer"
            }
          },
          "403": {
            "description": "Forbidden from creating duplicate/repeat transfer",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Stepup backup server not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Stepup TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. Stepup backup server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on stepup TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. Stepup backup server did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/transfers/{transferId}": {
      "get": {
        "description": "Query a single transfer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "Find transfer by ID",
        "operationId": "getTransferById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-exportParamName": "TransferId",
            "description": "ID of transfer to return",
            "name": "transferId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Transfer"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Transfer not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "message": {
          "type": "string",
          "x-omitempty": false
        },
        "type": {
          "description": "Severity level",
          "type": "string",
          "enum": [
            "error",
            "warning",
            "info",
            "debug",
            "trace"
          ],
          "x-omitempty": false
        }
      },
      "example": {
        "code": 0,
        "message": "message",
        "type": "info"
      }
    },
    "Archive": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Archive Status",
          "type": "string",
          "enum": [
            "queued",
            "running",
            "completed",
            "failed"
          ],
          "x-omitempty": false
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-omitempty": false
        },
        "url": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Archive"
      },
      "example": {
        "id": 1,
        "status": "queued",
        "time": "2024-12-31T23:59:59Z",
        "url": "/archives/1"
      }
    },
    "Backup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "snapshots": {
          "x-omitempty": false,
          "$ref": "#/definitions/Snapshots"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Backup"
      },
      "example": {
        "id": 1,
        "time": "2024-12-31T23:59:59Z"
      }
    },
    "Log": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Archive Status",
          "type": "string",
          "enum": [
            "queued",
            "running",
            "completed",
            "failed"
          ],
          "x-omitempty": false
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-omitempty": false
        },
        "url": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Log"
      },
      "example": {
        "id": 1,
        "status": "completed",
        "time": "2024-12-31T23:59:59Z",
        "url": "/static/logs-20240910T064100Z.zip"
      }
    },
    "Quota": {
      "type": "object",
      "properties": {
        "hard": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "path": {
          "type": "string",
          "x-omitempty": false
        },
        "soft": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Synchronization"
      },
      "example": {
        "hard": 1073741824,
        "id": 1,
        "path": "/home/toc/",
        "soft": 838860800
      }
    },
    "Restoration": {
      "type": "object",
      "properties": {
        "backup": {
          "x-omitempty": false,
          "$ref": "#/definitions/Backup"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Restoration Status",
          "type": "string",
          "enum": [
            "queued",
            "running",
            "completed",
            "failed"
          ],
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Restoration"
      },
      "example": {
        "id": 1
      }
    },
    "Snapshot": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string",
          "x-omitempty": false
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Snapshot Status",
          "type": "string",
          "enum": [
            "queued",
            "creating",
            "created",
            "uncreated",
            "transferring",
            "transferred",
            "untransferred",
            "restoring",
            "restored",
            "unrestored"
          ],
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Snapshot"
      },
      "example": {
        "file": "/var/opt/toc/archive/20241231T235959Z-server.tar.gz",
        "id": 1,
        "status": "restored"
      }
    },
    "Snapshots": {
      "type": "object",
      "properties": {
        "db": {
          "x-omitempty": false,
          "$ref": "#/definitions/Snapshot"
        },
        "file": {
          "x-omitempty": false,
          "$ref": "#/definitions/Snapshot"
        },
        "mail": {
          "x-omitempty": false,
          "$ref": "#/definitions/Snapshot"
        },
        "web": {
          "x-omitempty": false,
          "$ref": "#/definitions/Snapshot"
        }
      },
      "xml": {
        "name": "Snapshots"
      }
    },
    "Synchronization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Synchronization Status",
          "type": "string",
          "enum": [
            "queued",
            "running",
            "completed",
            "failed"
          ],
          "x-omitempty": false
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Synchronization"
      },
      "example": {
        "id": 1,
        "status": "running",
        "time": "2024-12-31T23:59:59Z"
      }
    },
    "Transfer": {
      "type": "object",
      "properties": {
        "backup": {
          "x-omitempty": false,
          "$ref": "#/definitions/Backup"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Transfer Status",
          "type": "string",
          "enum": [
            "queued",
            "running",
            "completed",
            "failed"
          ],
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Transfer"
      },
      "example": {
        "id": 1,
        "status": "failed"
      }
    }
  },
  "tags": [
    {
      "description": "For creating new backup snapshots and querying backup info",
      "name": "backup",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For performing backup restoration and querying restoration info and status",
      "name": "restoration",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For transferring backup snapshots and querying transfer info and status",
      "name": "transfer",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For sychronizing backup snapshots latest status",
      "name": "synchronization",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For checking quota limits",
      "name": "quota",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For exporting server logs",
      "name": "log",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For creating backup data ZIP archives",
      "name": "archive",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    }
  ],
  "externalDocs": {
    "description": "Find out more about TOC",
    "url": "https://github.com/gyk4j/toc"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "An API to create backup and restoration",
    "title": "toc",
    "termsOfService": "http://gyk4j.github.io/terms/",
    "contact": {
      "email": "147011991+gyk4j@users.noreply.github.com"
    },
    "license": {
      "name": "Eclipse Public License 2.0 (EPL)",
      "url": "https://www.eclipse.org/legal/epl-2.0/"
    },
    "version": "1.0.0"
  },
  "host": "0.0.0.0:80",
  "basePath": "/v1",
  "paths": {
    "/archives": {
      "get": {
        "description": "Retrieve progress, information and state of all archives",
        "produces": [
          "application/json"
        ],
        "tags": [
          "archive"
        ],
        "summary": "Query archive info",
        "operationId": "getArchives",
        "responses": {
          "200": {
            "description": "Archive info retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Archive"
              }
            }
          },
          "403": {
            "description": "Forbidden from querying archive info",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Archive not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update archive status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "archive"
        ],
        "summary": "Update archive status/info",
        "operationId": "updateArchive",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Archive request to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Archive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Archive updated",
            "schema": {
              "$ref": "#/definitions/Archive"
            }
          },
          "403": {
            "description": "Forbidden from updating archive",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a ZIP archive of backup snapshot data",
        "produces": [
          "application/json"
        ],
        "tags": [
          "archive"
        ],
        "summary": "Archive data",
        "operationId": "newArchive",
        "responses": {
          "200": {
            "description": "Data archived",
            "schema": {
              "$ref": "#/definitions/Archive"
            }
          },
          "403": {
            "description": "Forbidden from archiving data",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Data not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/archives/{archiveId}": {
      "get": {
        "description": "Query a single archive",
        "produces": [
          "application/json"
        ],
        "tags": [
          "archive"
        ],
        "summary": "Find archive by ID",
        "operationId": "getArchiveById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-exportParamName": "ArchiveId",
            "description": "ID of archive to return",
            "name": "archiveId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Archive"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Archive not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/backups": {
      "get": {
        "description": "Retrieve information and state of all backups and their snapshots",
        "produces": [
          "application/json"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Query backup info",
        "operationId": "getBackups",
        "responses": {
          "200": {
            "description": "Backup info retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Backup"
              }
            }
          },
          "403": {
            "description": "Forbidden from querying backup info",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Backup not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update backup status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Update backup status/info",
        "operationId": "updateBackup",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Backup and associated snapshots to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Backup updated",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "403": {
            "description": "Forbidden from updating backup",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new backup snapshot",
        "produces": [
          "application/json"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Create a new backup snapshot",
        "operationId": "newBackup",
        "responses": {
          "200": {
            "description": "Backup started",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "403": {
            "description": "Forbidden from creating duplicate/repeat backup",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Main backup server not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Main TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. Main backup server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on main TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. Main backup server did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/backups/{backupId}": {
      "get": {
        "description": "Query a single backup",
        "produces": [
          "application/json"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Find backup by ID",
        "operationId": "getBackupById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-exportParamName": "BackupId",
            "description": "ID of backup to return",
            "name": "backupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Backup not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/logs": {
      "put": {
        "description": "Update log status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "log"
        ],
        "summary": "Update log status/info",
        "operationId": "updateLog",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Log request to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Log"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log updated",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "403": {
            "description": "Forbidden from updating log request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Export logs for all servers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "log"
        ],
        "summary": "Export logs",
        "operationId": "exportLog",
        "responses": {
          "200": {
            "description": "Logs exported",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "403": {
            "description": "Forbidden from exporting logs",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Quota not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/quotas": {
      "get": {
        "description": "Retrieve all quotas set",
        "produces": [
          "application/json"
        ],
        "tags": [
          "quota"
        ],
        "summary": "Refresh quota info",
        "operationId": "getQuotas",
        "responses": {
          "200": {
            "description": "Quotas retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Quota"
              }
            }
          },
          "403": {
            "description": "Forbidden from querying quota info",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Quota not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/restorations": {
      "get": {
        "description": "Retrieve information and state of all restorations, their backup and snapshots",
        "produces": [
          "application/json"
        ],
        "tags": [
          "restoration"
        ],
        "summary": "Query restoration info",
        "operationId": "getRestorations",
        "responses": {
          "200": {
            "description": "Restoration info retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Restoration"
              }
            }
          },
          "403": {
            "description": "Forbidden from querying restoration info",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Restoration not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update restoration status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "restoration"
        ],
        "summary": "Update restoration status/info",
        "operationId": "updateRestoration",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Restoration request to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Restoration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restoration updated",
            "schema": {
              "$ref": "#/definitions/Restoration"
            }
          },
          "403": {
            "description": "Forbidden from updating restoration",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Run backup restoration and return immediately without waiting",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "restoration"
        ],
        "summary": "Start a backup restoration attempt",
        "operationId": "newRestoration",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Backup and associated snapshots for restoration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restoration started",
            "schema": {
              "$ref": "#/definitions/Restoration"
            }
          },
          "403": {
            "description": "Forbidden from creating duplicate/repeat restoration",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Stepup backup server not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Stepup TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. Stepup backup server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on stepup TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. Stepup backup server did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/restorations/{restorationId}": {
      "get": {
        "description": "Query a single restoration",
        "produces": [
          "application/json"
        ],
        "tags": [
          "restoration"
        ],
        "summary": "Find restoration by ID",
        "operationId": "getRestorationById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-exportParamName": "RestorationId",
            "description": "ID of restoration to return",
            "name": "restorationId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Restoration"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Restoration not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/synchronizations": {
      "put": {
        "description": "Update synchronization status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "synchronization"
        ],
        "summary": "Update synchronization status/info",
        "operationId": "updateSynchronization",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Synchronization request to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Synchronization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Synchronization updated",
            "schema": {
              "$ref": "#/definitions/Synchronization"
            }
          },
          "403": {
            "description": "Forbidden from updating synchronization",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Initiates backup snapshot state synchronization due to network disconnection",
        "produces": [
          "application/json"
        ],
        "tags": [
          "synchronization"
        ],
        "summary": "Request backup snapshot synchronization between main and stepup controller",
        "operationId": "newSynchronization",
        "responses": {
          "200": {
            "description": "Synchronization started",
            "schema": {
              "$ref": "#/definitions/Synchronization"
            }
          },
          "403": {
            "description": "Forbidden from starting synchronization",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. Backup server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. One or more servers did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/transfers": {
      "get": {
        "description": "Retrieve status of all transfers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "Query transfer status",
        "operationId": "getTransfers",
        "responses": {
          "200": {
            "description": "Transfer info retrieved",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transfer"
              }
            }
          },
          "403": {
            "description": "Forbidden from querying transfer status",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Transfer not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update transfer status/info",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "Update transfer status/info",
        "operationId": "updateTransfer",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Transfer request to update",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transfer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transfer updated",
            "schema": {
              "$ref": "#/definitions/Transfer"
            }
          },
          "403": {
            "description": "Forbidden from updating transfer",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "TOC controller not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. TOC controller did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post": {
        "description": "Run transfer and return immediately without waiting",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "Start a backup transfer attempt",
        "operationId": "newTransfer",
        "parameters": [
          {
            "x-exportParamName": "Body",
            "description": "Backup and associated snapshots for restoration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transfer started",
            "schema": {
              "$ref": "#/definitions/Transfer"
            }
          },
          "403": {
            "description": "Forbidden from creating duplicate/repeat transfer",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Stepup backup server not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "500": {
            "description": "Stepup TOC controller error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "502": {
            "description": "Bad gateway. Stepup backup server error",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "503": {
            "description": "Service unavailable on stepup TOC controller",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "504": {
            "description": "Gateway timeout. Stepup backup server did not reply.",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/transfers/{transferId}": {
      "get": {
        "description": "Query a single transfer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "transfer"
        ],
        "summary": "Find transfer by ID",
        "operationId": "getTransferById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-exportParamName": "TransferId",
            "description": "ID of transfer to return",
            "name": "transferId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Transfer"
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "404": {
            "description": "Transfer not found",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "x-omitempty": false
        },
        "message": {
          "type": "string",
          "x-omitempty": false
        },
        "type": {
          "description": "Severity level",
          "type": "string",
          "enum": [
            "error",
            "warning",
            "info",
            "debug",
            "trace"
          ],
          "x-omitempty": false
        }
      },
      "example": {
        "code": 0,
        "message": "message",
        "type": "info"
      }
    },
    "Archive": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Archive Status",
          "type": "string",
          "enum": [
            "queued",
            "running",
            "completed",
            "failed"
          ],
          "x-omitempty": false
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-omitempty": false
        },
        "url": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Archive"
      },
      "example": {
        "id": 1,
        "status": "queued",
        "time": "2024-12-31T23:59:59Z",
        "url": "/archives/1"
      }
    },
    "Backup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "snapshots": {
          "x-omitempty": false,
          "$ref": "#/definitions/Snapshots"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Backup"
      },
      "example": {
        "id": 1,
        "time": "2024-12-31T23:59:59Z"
      }
    },
    "Log": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Archive Status",
          "type": "string",
          "enum": [
            "queued",
            "running",
            "completed",
            "failed"
          ],
          "x-omitempty": false
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-omitempty": false
        },
        "url": {
          "type": "string",
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Log"
      },
      "example": {
        "id": 1,
        "status": "completed",
        "time": "2024-12-31T23:59:59Z",
        "url": "/static/logs-20240910T064100Z.zip"
      }
    },
    "Quota": {
      "type": "object",
      "properties": {
        "hard": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "path": {
          "type": "string",
          "x-omitempty": false
        },
        "soft": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Synchronization"
      },
      "example": {
        "hard": 1073741824,
        "id": 1,
        "path": "/home/toc/",
        "soft": 838860800
      }
    },
    "Restoration": {
      "type": "object",
      "properties": {
        "backup": {
          "x-omitempty": false,
          "$ref": "#/definitions/Backup"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Restoration Status",
          "type": "string",
          "enum": [
            "queued",
            "running",
            "completed",
            "failed"
          ],
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Restoration"
      },
      "example": {
        "id": 1
      }
    },
    "Snapshot": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string",
          "x-omitempty": false
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Snapshot Status",
          "type": "string",
          "enum": [
            "queued",
            "creating",
            "created",
            "uncreated",
            "transferring",
            "transferred",
            "untransferred",
            "restoring",
            "restored",
            "unrestored"
          ],
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Snapshot"
      },
      "example": {
        "file": "/var/opt/toc/archive/20241231T235959Z-server.tar.gz",
        "id": 1,
        "status": "restored"
      }
    },
    "Snapshots": {
      "type": "object",
      "properties": {
        "db": {
          "x-omitempty": false,
          "$ref": "#/definitions/Snapshot"
        },
        "file": {
          "x-omitempty": false,
          "$ref": "#/definitions/Snapshot"
        },
        "mail": {
          "x-omitempty": false,
          "$ref": "#/definitions/Snapshot"
        },
        "web": {
          "x-omitempty": false,
          "$ref": "#/definitions/Snapshot"
        }
      },
      "xml": {
        "name": "Snapshots"
      }
    },
    "Synchronization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Synchronization Status",
          "type": "string",
          "enum": [
            "queued",
            "running",
            "completed",
            "failed"
          ],
          "x-omitempty": false
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Synchronization"
      },
      "example": {
        "id": 1,
        "status": "running",
        "time": "2024-12-31T23:59:59Z"
      }
    },
    "Transfer": {
      "type": "object",
      "properties": {
        "backup": {
          "x-omitempty": false,
          "$ref": "#/definitions/Backup"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "status": {
          "description": "Transfer Status",
          "type": "string",
          "enum": [
            "queued",
            "running",
            "completed",
            "failed"
          ],
          "x-omitempty": false
        }
      },
      "xml": {
        "name": "Transfer"
      },
      "example": {
        "id": 1,
        "status": "failed"
      }
    }
  },
  "tags": [
    {
      "description": "For creating new backup snapshots and querying backup info",
      "name": "backup",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For performing backup restoration and querying restoration info and status",
      "name": "restoration",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For transferring backup snapshots and querying transfer info and status",
      "name": "transfer",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For sychronizing backup snapshots latest status",
      "name": "synchronization",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For checking quota limits",
      "name": "quota",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For exporting server logs",
      "name": "log",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    },
    {
      "description": "For creating backup data ZIP archives",
      "name": "archive",
      "externalDocs": {
        "description": "Find out more about TOC",
        "url": "https://github.com/gyk4j/toc"
      }
    }
  ],
  "externalDocs": {
    "description": "Find out more about TOC",
    "url": "https://github.com/gyk4j/toc"
  }
}`))
}

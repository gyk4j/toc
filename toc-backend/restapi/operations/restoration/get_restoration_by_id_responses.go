// Code generated by go-swagger; DO NOT EDIT.

package restoration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gyk4j/toc/toc/server/models"
)

// GetRestorationByIDOKCode is the HTTP code returned for type GetRestorationByIDOK
const GetRestorationByIDOKCode int = 200

/*
GetRestorationByIDOK successful operation

swagger:response getRestorationByIdOK
*/
type GetRestorationByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Restoration `json:"body,omitempty"`
}

// NewGetRestorationByIDOK creates GetRestorationByIDOK with default headers values
func NewGetRestorationByIDOK() *GetRestorationByIDOK {

	return &GetRestorationByIDOK{}
}

// WithPayload adds the payload to the get restoration by Id o k response
func (o *GetRestorationByIDOK) WithPayload(payload *models.Restoration) *GetRestorationByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get restoration by Id o k response
func (o *GetRestorationByIDOK) SetPayload(payload *models.Restoration) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRestorationByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRestorationByIDBadRequestCode is the HTTP code returned for type GetRestorationByIDBadRequest
const GetRestorationByIDBadRequestCode int = 400

/*
GetRestorationByIDBadRequest Invalid ID supplied

swagger:response getRestorationByIdBadRequest
*/
type GetRestorationByIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetRestorationByIDBadRequest creates GetRestorationByIDBadRequest with default headers values
func NewGetRestorationByIDBadRequest() *GetRestorationByIDBadRequest {

	return &GetRestorationByIDBadRequest{}
}

// WithPayload adds the payload to the get restoration by Id bad request response
func (o *GetRestorationByIDBadRequest) WithPayload(payload *models.APIResponse) *GetRestorationByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get restoration by Id bad request response
func (o *GetRestorationByIDBadRequest) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRestorationByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRestorationByIDNotFoundCode is the HTTP code returned for type GetRestorationByIDNotFound
const GetRestorationByIDNotFoundCode int = 404

/*
GetRestorationByIDNotFound Restoration not found

swagger:response getRestorationByIdNotFound
*/
type GetRestorationByIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetRestorationByIDNotFound creates GetRestorationByIDNotFound with default headers values
func NewGetRestorationByIDNotFound() *GetRestorationByIDNotFound {

	return &GetRestorationByIDNotFound{}
}

// WithPayload adds the payload to the get restoration by Id not found response
func (o *GetRestorationByIDNotFound) WithPayload(payload *models.APIResponse) *GetRestorationByIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get restoration by Id not found response
func (o *GetRestorationByIDNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRestorationByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

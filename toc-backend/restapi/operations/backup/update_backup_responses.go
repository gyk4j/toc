// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gyk4j/toc/toc-backend/models"
)

// UpdateBackupOKCode is the HTTP code returned for type UpdateBackupOK
const UpdateBackupOKCode int = 200

/*
UpdateBackupOK Backup updated

swagger:response updateBackupOK
*/
type UpdateBackupOK struct {

	/*
	  In: Body
	*/
	Payload *models.Backup `json:"body,omitempty"`
}

// NewUpdateBackupOK creates UpdateBackupOK with default headers values
func NewUpdateBackupOK() *UpdateBackupOK {

	return &UpdateBackupOK{}
}

// WithPayload adds the payload to the update backup o k response
func (o *UpdateBackupOK) WithPayload(payload *models.Backup) *UpdateBackupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update backup o k response
func (o *UpdateBackupOK) SetPayload(payload *models.Backup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateBackupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateBackupForbiddenCode is the HTTP code returned for type UpdateBackupForbidden
const UpdateBackupForbiddenCode int = 403

/*
UpdateBackupForbidden Forbidden from updating backup

swagger:response updateBackupForbidden
*/
type UpdateBackupForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateBackupForbidden creates UpdateBackupForbidden with default headers values
func NewUpdateBackupForbidden() *UpdateBackupForbidden {

	return &UpdateBackupForbidden{}
}

// WithPayload adds the payload to the update backup forbidden response
func (o *UpdateBackupForbidden) WithPayload(payload *models.APIResponse) *UpdateBackupForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update backup forbidden response
func (o *UpdateBackupForbidden) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateBackupForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateBackupNotFoundCode is the HTTP code returned for type UpdateBackupNotFound
const UpdateBackupNotFoundCode int = 404

/*
UpdateBackupNotFound TOC controller not found

swagger:response updateBackupNotFound
*/
type UpdateBackupNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateBackupNotFound creates UpdateBackupNotFound with default headers values
func NewUpdateBackupNotFound() *UpdateBackupNotFound {

	return &UpdateBackupNotFound{}
}

// WithPayload adds the payload to the update backup not found response
func (o *UpdateBackupNotFound) WithPayload(payload *models.APIResponse) *UpdateBackupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update backup not found response
func (o *UpdateBackupNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateBackupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateBackupMethodNotAllowedCode is the HTTP code returned for type UpdateBackupMethodNotAllowed
const UpdateBackupMethodNotAllowedCode int = 405

/*
UpdateBackupMethodNotAllowed Bad request

swagger:response updateBackupMethodNotAllowed
*/
type UpdateBackupMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateBackupMethodNotAllowed creates UpdateBackupMethodNotAllowed with default headers values
func NewUpdateBackupMethodNotAllowed() *UpdateBackupMethodNotAllowed {

	return &UpdateBackupMethodNotAllowed{}
}

// WithPayload adds the payload to the update backup method not allowed response
func (o *UpdateBackupMethodNotAllowed) WithPayload(payload *models.APIResponse) *UpdateBackupMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update backup method not allowed response
func (o *UpdateBackupMethodNotAllowed) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateBackupMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateBackupInternalServerErrorCode is the HTTP code returned for type UpdateBackupInternalServerError
const UpdateBackupInternalServerErrorCode int = 500

/*
UpdateBackupInternalServerError TOC controller error

swagger:response updateBackupInternalServerError
*/
type UpdateBackupInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateBackupInternalServerError creates UpdateBackupInternalServerError with default headers values
func NewUpdateBackupInternalServerError() *UpdateBackupInternalServerError {

	return &UpdateBackupInternalServerError{}
}

// WithPayload adds the payload to the update backup internal server error response
func (o *UpdateBackupInternalServerError) WithPayload(payload *models.APIResponse) *UpdateBackupInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update backup internal server error response
func (o *UpdateBackupInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateBackupInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateBackupBadGatewayCode is the HTTP code returned for type UpdateBackupBadGateway
const UpdateBackupBadGatewayCode int = 502

/*
UpdateBackupBadGateway Bad gateway. TOC controller error

swagger:response updateBackupBadGateway
*/
type UpdateBackupBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateBackupBadGateway creates UpdateBackupBadGateway with default headers values
func NewUpdateBackupBadGateway() *UpdateBackupBadGateway {

	return &UpdateBackupBadGateway{}
}

// WithPayload adds the payload to the update backup bad gateway response
func (o *UpdateBackupBadGateway) WithPayload(payload *models.APIResponse) *UpdateBackupBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update backup bad gateway response
func (o *UpdateBackupBadGateway) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateBackupBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateBackupServiceUnavailableCode is the HTTP code returned for type UpdateBackupServiceUnavailable
const UpdateBackupServiceUnavailableCode int = 503

/*
UpdateBackupServiceUnavailable Service unavailable on TOC controller

swagger:response updateBackupServiceUnavailable
*/
type UpdateBackupServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateBackupServiceUnavailable creates UpdateBackupServiceUnavailable with default headers values
func NewUpdateBackupServiceUnavailable() *UpdateBackupServiceUnavailable {

	return &UpdateBackupServiceUnavailable{}
}

// WithPayload adds the payload to the update backup service unavailable response
func (o *UpdateBackupServiceUnavailable) WithPayload(payload *models.APIResponse) *UpdateBackupServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update backup service unavailable response
func (o *UpdateBackupServiceUnavailable) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateBackupServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateBackupGatewayTimeoutCode is the HTTP code returned for type UpdateBackupGatewayTimeout
const UpdateBackupGatewayTimeoutCode int = 504

/*
UpdateBackupGatewayTimeout Gateway timeout. TOC controller did not reply.

swagger:response updateBackupGatewayTimeout
*/
type UpdateBackupGatewayTimeout struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateBackupGatewayTimeout creates UpdateBackupGatewayTimeout with default headers values
func NewUpdateBackupGatewayTimeout() *UpdateBackupGatewayTimeout {

	return &UpdateBackupGatewayTimeout{}
}

// WithPayload adds the payload to the update backup gateway timeout response
func (o *UpdateBackupGatewayTimeout) WithPayload(payload *models.APIResponse) *UpdateBackupGatewayTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update backup gateway timeout response
func (o *UpdateBackupGatewayTimeout) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateBackupGatewayTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(504)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

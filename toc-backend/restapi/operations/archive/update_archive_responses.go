// Code generated by go-swagger; DO NOT EDIT.

package archive

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gyk4j/toc/toc-backend/models"
)

// UpdateArchiveOKCode is the HTTP code returned for type UpdateArchiveOK
const UpdateArchiveOKCode int = 200

/*
UpdateArchiveOK Archive updated

swagger:response updateArchiveOK
*/
type UpdateArchiveOK struct {

	/*
	  In: Body
	*/
	Payload *models.Archive `json:"body,omitempty"`
}

// NewUpdateArchiveOK creates UpdateArchiveOK with default headers values
func NewUpdateArchiveOK() *UpdateArchiveOK {

	return &UpdateArchiveOK{}
}

// WithPayload adds the payload to the update archive o k response
func (o *UpdateArchiveOK) WithPayload(payload *models.Archive) *UpdateArchiveOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update archive o k response
func (o *UpdateArchiveOK) SetPayload(payload *models.Archive) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateArchiveOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateArchiveForbiddenCode is the HTTP code returned for type UpdateArchiveForbidden
const UpdateArchiveForbiddenCode int = 403

/*
UpdateArchiveForbidden Forbidden from updating archive

swagger:response updateArchiveForbidden
*/
type UpdateArchiveForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateArchiveForbidden creates UpdateArchiveForbidden with default headers values
func NewUpdateArchiveForbidden() *UpdateArchiveForbidden {

	return &UpdateArchiveForbidden{}
}

// WithPayload adds the payload to the update archive forbidden response
func (o *UpdateArchiveForbidden) WithPayload(payload *models.APIResponse) *UpdateArchiveForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update archive forbidden response
func (o *UpdateArchiveForbidden) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateArchiveForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateArchiveNotFoundCode is the HTTP code returned for type UpdateArchiveNotFound
const UpdateArchiveNotFoundCode int = 404

/*
UpdateArchiveNotFound TOC controller not found

swagger:response updateArchiveNotFound
*/
type UpdateArchiveNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateArchiveNotFound creates UpdateArchiveNotFound with default headers values
func NewUpdateArchiveNotFound() *UpdateArchiveNotFound {

	return &UpdateArchiveNotFound{}
}

// WithPayload adds the payload to the update archive not found response
func (o *UpdateArchiveNotFound) WithPayload(payload *models.APIResponse) *UpdateArchiveNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update archive not found response
func (o *UpdateArchiveNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateArchiveNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateArchiveMethodNotAllowedCode is the HTTP code returned for type UpdateArchiveMethodNotAllowed
const UpdateArchiveMethodNotAllowedCode int = 405

/*
UpdateArchiveMethodNotAllowed Bad request

swagger:response updateArchiveMethodNotAllowed
*/
type UpdateArchiveMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateArchiveMethodNotAllowed creates UpdateArchiveMethodNotAllowed with default headers values
func NewUpdateArchiveMethodNotAllowed() *UpdateArchiveMethodNotAllowed {

	return &UpdateArchiveMethodNotAllowed{}
}

// WithPayload adds the payload to the update archive method not allowed response
func (o *UpdateArchiveMethodNotAllowed) WithPayload(payload *models.APIResponse) *UpdateArchiveMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update archive method not allowed response
func (o *UpdateArchiveMethodNotAllowed) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateArchiveMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateArchiveInternalServerErrorCode is the HTTP code returned for type UpdateArchiveInternalServerError
const UpdateArchiveInternalServerErrorCode int = 500

/*
UpdateArchiveInternalServerError TOC controller error

swagger:response updateArchiveInternalServerError
*/
type UpdateArchiveInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateArchiveInternalServerError creates UpdateArchiveInternalServerError with default headers values
func NewUpdateArchiveInternalServerError() *UpdateArchiveInternalServerError {

	return &UpdateArchiveInternalServerError{}
}

// WithPayload adds the payload to the update archive internal server error response
func (o *UpdateArchiveInternalServerError) WithPayload(payload *models.APIResponse) *UpdateArchiveInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update archive internal server error response
func (o *UpdateArchiveInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateArchiveInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateArchiveBadGatewayCode is the HTTP code returned for type UpdateArchiveBadGateway
const UpdateArchiveBadGatewayCode int = 502

/*
UpdateArchiveBadGateway Bad gateway. TOC controller error

swagger:response updateArchiveBadGateway
*/
type UpdateArchiveBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateArchiveBadGateway creates UpdateArchiveBadGateway with default headers values
func NewUpdateArchiveBadGateway() *UpdateArchiveBadGateway {

	return &UpdateArchiveBadGateway{}
}

// WithPayload adds the payload to the update archive bad gateway response
func (o *UpdateArchiveBadGateway) WithPayload(payload *models.APIResponse) *UpdateArchiveBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update archive bad gateway response
func (o *UpdateArchiveBadGateway) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateArchiveBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateArchiveServiceUnavailableCode is the HTTP code returned for type UpdateArchiveServiceUnavailable
const UpdateArchiveServiceUnavailableCode int = 503

/*
UpdateArchiveServiceUnavailable Service unavailable on TOC controller

swagger:response updateArchiveServiceUnavailable
*/
type UpdateArchiveServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateArchiveServiceUnavailable creates UpdateArchiveServiceUnavailable with default headers values
func NewUpdateArchiveServiceUnavailable() *UpdateArchiveServiceUnavailable {

	return &UpdateArchiveServiceUnavailable{}
}

// WithPayload adds the payload to the update archive service unavailable response
func (o *UpdateArchiveServiceUnavailable) WithPayload(payload *models.APIResponse) *UpdateArchiveServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update archive service unavailable response
func (o *UpdateArchiveServiceUnavailable) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateArchiveServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateArchiveGatewayTimeoutCode is the HTTP code returned for type UpdateArchiveGatewayTimeout
const UpdateArchiveGatewayTimeoutCode int = 504

/*
UpdateArchiveGatewayTimeout Gateway timeout. TOC controller did not reply.

swagger:response updateArchiveGatewayTimeout
*/
type UpdateArchiveGatewayTimeout struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateArchiveGatewayTimeout creates UpdateArchiveGatewayTimeout with default headers values
func NewUpdateArchiveGatewayTimeout() *UpdateArchiveGatewayTimeout {

	return &UpdateArchiveGatewayTimeout{}
}

// WithPayload adds the payload to the update archive gateway timeout response
func (o *UpdateArchiveGatewayTimeout) WithPayload(payload *models.APIResponse) *UpdateArchiveGatewayTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update archive gateway timeout response
func (o *UpdateArchiveGatewayTimeout) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateArchiveGatewayTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(504)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

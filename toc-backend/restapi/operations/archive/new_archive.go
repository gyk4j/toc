// Code generated by go-swagger; DO NOT EDIT.

package archive

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// NewArchiveHandlerFunc turns a function with the right signature into a new archive handler
type NewArchiveHandlerFunc func(NewArchiveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NewArchiveHandlerFunc) Handle(params NewArchiveParams) middleware.Responder {
	return fn(params)
}

// NewArchiveHandler interface for that can handle valid new archive params
type NewArchiveHandler interface {
	Handle(NewArchiveParams) middleware.Responder
}

// NewNewArchive creates a new http.Handler for the new archive operation
func NewNewArchive(ctx *middleware.Context, handler NewArchiveHandler) *NewArchive {
	return &NewArchive{Context: ctx, Handler: handler}
}

/*
	NewArchive swagger:route POST /archives archive newArchive

# Archive data

Create a ZIP archive of backup snapshot data
*/
type NewArchive struct {
	Context *middleware.Context
	Handler NewArchiveHandler
}

func (o *NewArchive) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewNewArchiveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

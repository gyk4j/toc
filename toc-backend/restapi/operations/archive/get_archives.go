// Code generated by go-swagger; DO NOT EDIT.

package archive

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetArchivesHandlerFunc turns a function with the right signature into a get archives handler
type GetArchivesHandlerFunc func(GetArchivesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetArchivesHandlerFunc) Handle(params GetArchivesParams) middleware.Responder {
	return fn(params)
}

// GetArchivesHandler interface for that can handle valid get archives params
type GetArchivesHandler interface {
	Handle(GetArchivesParams) middleware.Responder
}

// NewGetArchives creates a new http.Handler for the get archives operation
func NewGetArchives(ctx *middleware.Context, handler GetArchivesHandler) *GetArchives {
	return &GetArchives{Context: ctx, Handler: handler}
}

/*
	GetArchives swagger:route GET /archives archive getArchives

# Query archive info

Retrieve progress, information and state of all archives
*/
type GetArchives struct {
	Context *middleware.Context
	Handler GetArchivesHandler
}

func (o *GetArchives) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetArchivesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

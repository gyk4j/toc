// Code generated by go-swagger; DO NOT EDIT.

package log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gyk4j/toc/toc-backend/models"
)

// UpdateLogOKCode is the HTTP code returned for type UpdateLogOK
const UpdateLogOKCode int = 200

/*
UpdateLogOK Log updated

swagger:response updateLogOK
*/
type UpdateLogOK struct {

	/*
	  In: Body
	*/
	Payload *models.Log `json:"body,omitempty"`
}

// NewUpdateLogOK creates UpdateLogOK with default headers values
func NewUpdateLogOK() *UpdateLogOK {

	return &UpdateLogOK{}
}

// WithPayload adds the payload to the update log o k response
func (o *UpdateLogOK) WithPayload(payload *models.Log) *UpdateLogOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update log o k response
func (o *UpdateLogOK) SetPayload(payload *models.Log) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLogOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLogForbiddenCode is the HTTP code returned for type UpdateLogForbidden
const UpdateLogForbiddenCode int = 403

/*
UpdateLogForbidden Forbidden from updating log request

swagger:response updateLogForbidden
*/
type UpdateLogForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateLogForbidden creates UpdateLogForbidden with default headers values
func NewUpdateLogForbidden() *UpdateLogForbidden {

	return &UpdateLogForbidden{}
}

// WithPayload adds the payload to the update log forbidden response
func (o *UpdateLogForbidden) WithPayload(payload *models.APIResponse) *UpdateLogForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update log forbidden response
func (o *UpdateLogForbidden) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLogForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLogNotFoundCode is the HTTP code returned for type UpdateLogNotFound
const UpdateLogNotFoundCode int = 404

/*
UpdateLogNotFound TOC controller not found

swagger:response updateLogNotFound
*/
type UpdateLogNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateLogNotFound creates UpdateLogNotFound with default headers values
func NewUpdateLogNotFound() *UpdateLogNotFound {

	return &UpdateLogNotFound{}
}

// WithPayload adds the payload to the update log not found response
func (o *UpdateLogNotFound) WithPayload(payload *models.APIResponse) *UpdateLogNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update log not found response
func (o *UpdateLogNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLogNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLogMethodNotAllowedCode is the HTTP code returned for type UpdateLogMethodNotAllowed
const UpdateLogMethodNotAllowedCode int = 405

/*
UpdateLogMethodNotAllowed Bad request

swagger:response updateLogMethodNotAllowed
*/
type UpdateLogMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateLogMethodNotAllowed creates UpdateLogMethodNotAllowed with default headers values
func NewUpdateLogMethodNotAllowed() *UpdateLogMethodNotAllowed {

	return &UpdateLogMethodNotAllowed{}
}

// WithPayload adds the payload to the update log method not allowed response
func (o *UpdateLogMethodNotAllowed) WithPayload(payload *models.APIResponse) *UpdateLogMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update log method not allowed response
func (o *UpdateLogMethodNotAllowed) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLogMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLogInternalServerErrorCode is the HTTP code returned for type UpdateLogInternalServerError
const UpdateLogInternalServerErrorCode int = 500

/*
UpdateLogInternalServerError TOC controller error

swagger:response updateLogInternalServerError
*/
type UpdateLogInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateLogInternalServerError creates UpdateLogInternalServerError with default headers values
func NewUpdateLogInternalServerError() *UpdateLogInternalServerError {

	return &UpdateLogInternalServerError{}
}

// WithPayload adds the payload to the update log internal server error response
func (o *UpdateLogInternalServerError) WithPayload(payload *models.APIResponse) *UpdateLogInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update log internal server error response
func (o *UpdateLogInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLogInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLogBadGatewayCode is the HTTP code returned for type UpdateLogBadGateway
const UpdateLogBadGatewayCode int = 502

/*
UpdateLogBadGateway Bad gateway. TOC controller error

swagger:response updateLogBadGateway
*/
type UpdateLogBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateLogBadGateway creates UpdateLogBadGateway with default headers values
func NewUpdateLogBadGateway() *UpdateLogBadGateway {

	return &UpdateLogBadGateway{}
}

// WithPayload adds the payload to the update log bad gateway response
func (o *UpdateLogBadGateway) WithPayload(payload *models.APIResponse) *UpdateLogBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update log bad gateway response
func (o *UpdateLogBadGateway) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLogBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLogServiceUnavailableCode is the HTTP code returned for type UpdateLogServiceUnavailable
const UpdateLogServiceUnavailableCode int = 503

/*
UpdateLogServiceUnavailable Service unavailable on TOC controller

swagger:response updateLogServiceUnavailable
*/
type UpdateLogServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateLogServiceUnavailable creates UpdateLogServiceUnavailable with default headers values
func NewUpdateLogServiceUnavailable() *UpdateLogServiceUnavailable {

	return &UpdateLogServiceUnavailable{}
}

// WithPayload adds the payload to the update log service unavailable response
func (o *UpdateLogServiceUnavailable) WithPayload(payload *models.APIResponse) *UpdateLogServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update log service unavailable response
func (o *UpdateLogServiceUnavailable) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLogServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateLogGatewayTimeoutCode is the HTTP code returned for type UpdateLogGatewayTimeout
const UpdateLogGatewayTimeoutCode int = 504

/*
UpdateLogGatewayTimeout Gateway timeout. TOC controller did not reply.

swagger:response updateLogGatewayTimeout
*/
type UpdateLogGatewayTimeout struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateLogGatewayTimeout creates UpdateLogGatewayTimeout with default headers values
func NewUpdateLogGatewayTimeout() *UpdateLogGatewayTimeout {

	return &UpdateLogGatewayTimeout{}
}

// WithPayload adds the payload to the update log gateway timeout response
func (o *UpdateLogGatewayTimeout) WithPayload(payload *models.APIResponse) *UpdateLogGatewayTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update log gateway timeout response
func (o *UpdateLogGatewayTimeout) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateLogGatewayTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(504)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Code generated by go-swagger; DO NOT EDIT.

package transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gyk4j/toc/toc-backend/models"
)

// UpdateTransferOKCode is the HTTP code returned for type UpdateTransferOK
const UpdateTransferOKCode int = 200

/*
UpdateTransferOK Transfer updated

swagger:response updateTransferOK
*/
type UpdateTransferOK struct {

	/*
	  In: Body
	*/
	Payload *models.Transfer `json:"body,omitempty"`
}

// NewUpdateTransferOK creates UpdateTransferOK with default headers values
func NewUpdateTransferOK() *UpdateTransferOK {

	return &UpdateTransferOK{}
}

// WithPayload adds the payload to the update transfer o k response
func (o *UpdateTransferOK) WithPayload(payload *models.Transfer) *UpdateTransferOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update transfer o k response
func (o *UpdateTransferOK) SetPayload(payload *models.Transfer) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTransferOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTransferForbiddenCode is the HTTP code returned for type UpdateTransferForbidden
const UpdateTransferForbiddenCode int = 403

/*
UpdateTransferForbidden Forbidden from updating transfer

swagger:response updateTransferForbidden
*/
type UpdateTransferForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTransferForbidden creates UpdateTransferForbidden with default headers values
func NewUpdateTransferForbidden() *UpdateTransferForbidden {

	return &UpdateTransferForbidden{}
}

// WithPayload adds the payload to the update transfer forbidden response
func (o *UpdateTransferForbidden) WithPayload(payload *models.APIResponse) *UpdateTransferForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update transfer forbidden response
func (o *UpdateTransferForbidden) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTransferForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTransferNotFoundCode is the HTTP code returned for type UpdateTransferNotFound
const UpdateTransferNotFoundCode int = 404

/*
UpdateTransferNotFound TOC controller not found

swagger:response updateTransferNotFound
*/
type UpdateTransferNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTransferNotFound creates UpdateTransferNotFound with default headers values
func NewUpdateTransferNotFound() *UpdateTransferNotFound {

	return &UpdateTransferNotFound{}
}

// WithPayload adds the payload to the update transfer not found response
func (o *UpdateTransferNotFound) WithPayload(payload *models.APIResponse) *UpdateTransferNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update transfer not found response
func (o *UpdateTransferNotFound) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTransferNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTransferMethodNotAllowedCode is the HTTP code returned for type UpdateTransferMethodNotAllowed
const UpdateTransferMethodNotAllowedCode int = 405

/*
UpdateTransferMethodNotAllowed Bad request

swagger:response updateTransferMethodNotAllowed
*/
type UpdateTransferMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTransferMethodNotAllowed creates UpdateTransferMethodNotAllowed with default headers values
func NewUpdateTransferMethodNotAllowed() *UpdateTransferMethodNotAllowed {

	return &UpdateTransferMethodNotAllowed{}
}

// WithPayload adds the payload to the update transfer method not allowed response
func (o *UpdateTransferMethodNotAllowed) WithPayload(payload *models.APIResponse) *UpdateTransferMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update transfer method not allowed response
func (o *UpdateTransferMethodNotAllowed) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTransferMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTransferInternalServerErrorCode is the HTTP code returned for type UpdateTransferInternalServerError
const UpdateTransferInternalServerErrorCode int = 500

/*
UpdateTransferInternalServerError TOC controller error

swagger:response updateTransferInternalServerError
*/
type UpdateTransferInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTransferInternalServerError creates UpdateTransferInternalServerError with default headers values
func NewUpdateTransferInternalServerError() *UpdateTransferInternalServerError {

	return &UpdateTransferInternalServerError{}
}

// WithPayload adds the payload to the update transfer internal server error response
func (o *UpdateTransferInternalServerError) WithPayload(payload *models.APIResponse) *UpdateTransferInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update transfer internal server error response
func (o *UpdateTransferInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTransferInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTransferBadGatewayCode is the HTTP code returned for type UpdateTransferBadGateway
const UpdateTransferBadGatewayCode int = 502

/*
UpdateTransferBadGateway Bad gateway. TOC controller error

swagger:response updateTransferBadGateway
*/
type UpdateTransferBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTransferBadGateway creates UpdateTransferBadGateway with default headers values
func NewUpdateTransferBadGateway() *UpdateTransferBadGateway {

	return &UpdateTransferBadGateway{}
}

// WithPayload adds the payload to the update transfer bad gateway response
func (o *UpdateTransferBadGateway) WithPayload(payload *models.APIResponse) *UpdateTransferBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update transfer bad gateway response
func (o *UpdateTransferBadGateway) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTransferBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTransferServiceUnavailableCode is the HTTP code returned for type UpdateTransferServiceUnavailable
const UpdateTransferServiceUnavailableCode int = 503

/*
UpdateTransferServiceUnavailable Service unavailable on TOC controller

swagger:response updateTransferServiceUnavailable
*/
type UpdateTransferServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTransferServiceUnavailable creates UpdateTransferServiceUnavailable with default headers values
func NewUpdateTransferServiceUnavailable() *UpdateTransferServiceUnavailable {

	return &UpdateTransferServiceUnavailable{}
}

// WithPayload adds the payload to the update transfer service unavailable response
func (o *UpdateTransferServiceUnavailable) WithPayload(payload *models.APIResponse) *UpdateTransferServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update transfer service unavailable response
func (o *UpdateTransferServiceUnavailable) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTransferServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTransferGatewayTimeoutCode is the HTTP code returned for type UpdateTransferGatewayTimeout
const UpdateTransferGatewayTimeoutCode int = 504

/*
UpdateTransferGatewayTimeout Gateway timeout. TOC controller did not reply.

swagger:response updateTransferGatewayTimeout
*/
type UpdateTransferGatewayTimeout struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewUpdateTransferGatewayTimeout creates UpdateTransferGatewayTimeout with default headers values
func NewUpdateTransferGatewayTimeout() *UpdateTransferGatewayTimeout {

	return &UpdateTransferGatewayTimeout{}
}

// WithPayload adds the payload to the update transfer gateway timeout response
func (o *UpdateTransferGatewayTimeout) WithPayload(payload *models.APIResponse) *UpdateTransferGatewayTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update transfer gateway timeout response
func (o *UpdateTransferGatewayTimeout) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTransferGatewayTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(504)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

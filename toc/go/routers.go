/*
 * TOC API
 *
 * An API to create backup and restoration
 *
 * API version: 1.0.0
 * Contact: 147011991+gyk4j@users.noreply.github.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/v1/",
		Index,
	},

	Route{
		"ArchiveData",
		strings.ToUpper("Post"),
		"/v1/archives",
		ArchiveData,
	},

	Route{
		"GetArchive",
		strings.ToUpper("Get"),
		"/v1/archives",
		GetArchive,
	},

	Route{
		"GetArchiveById",
		strings.ToUpper("Get"),
		"/v1/archives/{archiveId}",
		GetArchiveById,
	},

	Route{
		"GetBackup",
		strings.ToUpper("Get"),
		"/v1/backups",
		GetBackup,
	},

	Route{
		"GetBackupById",
		strings.ToUpper("Get"),
		"/v1/backups/{backupId}",
		GetBackupById,
	},

	Route{
		"NewBackup",
		strings.ToUpper("Post"),
		"/v1/backups",
		NewBackup,
	},

	Route{
		"ExportLog",
		strings.ToUpper("Post"),
		"/v1/logs",
		ExportLog,
	},

	Route{
		"GetQuota",
		strings.ToUpper("Get"),
		"/v1/quotas",
		GetQuota,
	},

	Route{
		"GetRestoration",
		strings.ToUpper("Get"),
		"/v1/restorations",
		GetRestoration,
	},

	Route{
		"GetRestorationById",
		strings.ToUpper("Get"),
		"/v1/restorations/{restorationId}",
		GetRestorationById,
	},

	Route{
		"NewRestoration",
		strings.ToUpper("Post"),
		"/v1/restorations",
		NewRestoration,
	},

	Route{
		"NewSynchronization",
		strings.ToUpper("Post"),
		"/v1/synchronizations",
		NewSynchronization,
	},
}

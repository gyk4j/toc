// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Snapshot snapshot
// Example: {"complete":true,"file":"/var/opt/toc/archive/20241231T235959Z-server.tar.gz","id":1,"status":"completed"}
//
// swagger:model Snapshot
type Snapshot struct {

	// complete
	Complete bool `json:"complete"`

	// file
	File string `json:"file"`

	// id
	ID int64 `json:"id"`

	// Snapshot Status
	// Enum: [queued in-progress completed failed]
	Status string `json:"status"`
}

// Validate validates this snapshot
func (m *Snapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var snapshotTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["queued","in-progress","completed","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapshotTypeStatusPropEnum = append(snapshotTypeStatusPropEnum, v)
	}
}

const (

	// SnapshotStatusQueued captures enum value "queued"
	SnapshotStatusQueued string = "queued"

	// SnapshotStatusInDashProgress captures enum value "in-progress"
	SnapshotStatusInDashProgress string = "in-progress"

	// SnapshotStatusCompleted captures enum value "completed"
	SnapshotStatusCompleted string = "completed"

	// SnapshotStatusFailed captures enum value "failed"
	SnapshotStatusFailed string = "failed"
)

// prop value enum
func (m *Snapshot) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, snapshotTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Snapshot) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snapshot based on context it is used
func (m *Snapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Snapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Snapshot) UnmarshalBinary(b []byte) error {
	var res Snapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package archive

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetArchiveByIDHandlerFunc turns a function with the right signature into a get archive by Id handler
type GetArchiveByIDHandlerFunc func(GetArchiveByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetArchiveByIDHandlerFunc) Handle(params GetArchiveByIDParams) middleware.Responder {
	return fn(params)
}

// GetArchiveByIDHandler interface for that can handle valid get archive by Id params
type GetArchiveByIDHandler interface {
	Handle(GetArchiveByIDParams) middleware.Responder
}

// NewGetArchiveByID creates a new http.Handler for the get archive by Id operation
func NewGetArchiveByID(ctx *middleware.Context, handler GetArchiveByIDHandler) *GetArchiveByID {
	return &GetArchiveByID{Context: ctx, Handler: handler}
}

/*
	GetArchiveByID swagger:route GET /archives/{archiveId} archive getArchiveById

# Find archive by ID

Query a single archive
*/
type GetArchiveByID struct {
	Context *middleware.Context
	Handler GetArchiveByIDHandler
}

func (o *GetArchiveByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetArchiveByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

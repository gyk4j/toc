// Code generated by go-swagger; DO NOT EDIT.

package restoration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// NewRestorationHandlerFunc turns a function with the right signature into a new restoration handler
type NewRestorationHandlerFunc func(NewRestorationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NewRestorationHandlerFunc) Handle(params NewRestorationParams) middleware.Responder {
	return fn(params)
}

// NewRestorationHandler interface for that can handle valid new restoration params
type NewRestorationHandler interface {
	Handle(NewRestorationParams) middleware.Responder
}

// NewNewRestoration creates a new http.Handler for the new restoration operation
func NewNewRestoration(ctx *middleware.Context, handler NewRestorationHandler) *NewRestoration {
	return &NewRestoration{Context: ctx, Handler: handler}
}

/*
	NewRestoration swagger:route POST /restorations restoration newRestoration

# Start a backup restoration attempt

Run backup restoration and return immediately without waiting
*/
type NewRestoration struct {
	Context *middleware.Context
	Handler NewRestorationHandler
}

func (o *NewRestoration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewNewRestorationParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
